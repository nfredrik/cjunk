
Pass parameters to a module
---------------------------

/sbin/insmod tets-driver.ko how_many=10 whom="Mom"

 /sbin/rmmod tets-driver.ko 



Att installera
-------------
kör:

[root@mammoth test_driver]# make install
su -c "cp -v tets-driver.ko /lib/modules/2.6.23.17-88.fc7/kernel/drivers/misc && /sbin/depmod -a"
`tets-driver.ko' -> `/lib/modules/2.6.23.17-88.fc7/kernel/drivers/misc/tets-driver.ko'




((((
För att få med en rutin att laddas per automatik, flytta modulen (*.ko) till

exvis:  /lib/modules/2.6.23.17-88.fc7/kernel/drivers/misc/

och kör

$depmod
)))))


Att verifiera
-------------

kolla med

$dmesg

sd 13:0:0:0: Attached scsi generic sg10 type 0
usb 7-3.1.4: USB disconnect, address 21
Godbye cruel Mom
(0) Hello, Mom
(1) Hello, Mom
(2) Hello, Mom
(3) Hello, Mom
(4) Hello, Mom
(5) Hello, Mom
(6) Hello, Mom
(7) Hello, Mom
(8) Hello, Mom
(9) Hello, Mom



Lista moduler som kan laddas:
-----------------------------


 /sbin/modprobe -l | grep tets

]# /sbin/modprobe -l | grep tets
/lib/modules/2.6.23.17-88.fc7/kernel/drivers/misc/tets-driver.ko
[root@mammoth test_driver]# 








Parameterar/options lägger man här
----------------------------------

/etc/modprobe.conf


# cat /etc/modprobe.conf
alias eth0 e1000
alias scsi_hostadapter ahci
alias scsi_hostadapter1 usb-storage
alias snd-card-0 snd-hda-intel
options snd-card-0 index=0  
options snd-hda-intel index=0  
options tets-driver how_many=10 whom="Mom"   <<<<<<=====
[root@mammoth test_driver]# 






Då bör den dyka upp när man bootar maskinen ....


man kan få fram uppgifter med modinfo
-------------------------------------


/sbin/modinfo  tets-driver
filename:       /lib/modules/2.6.23.17-88.fc7/kernel/drivers/misc/tets-driver.ko
license:        $LICENSE$
author:         Fredrik Svärd (fredrik@dronten)
description:    My kernel module
depends:        
vermagic:       2.6.23.17-88.fc7 SMP mod_unload 686 4KSTACKS 
parm:           whom:charp
parm:           how_many:int
[root@mammoth test_driver]# 



/sbin/modprobe tets_driver  # för att lägga in

/sbin/modprobe -r tets_driver  # för att ta bort



udev
----


This is what happens with the default udev rule, which says that when a miscellaneous device appears, create a file named /dev/<device name> and give it permissions 0660 (owner and group have read-write access, everyone else has no access). We would really like instead for the device be readable by regular users and have a link to it named /dev/hello_world. In order to do this, we'll write a udev rule.

The udev rule has to do two things: create a symbolic link and change the permissions on device to make world readable. The rule that accomplishes this is:

KERNEL=="hello", SYMLINK+="hello_world", MODE="0444"

We'll break the rule down into parts and explain each part.

KERNEL=="hello" says to execute the rest of the rule when a device with a name the same as this string (the == operator means "comparison") appears in /sys. The hello device appeared when we called misc_register() with a structure containing the device name "hello". See the result for yourself in /sys:

$ ls -d /sys/class/misc/hello/
/sys/class/misc/hello/

SYMLINK+="hello_world" says to add (the += operator means append) hello_world to the list of symbolic links that should be created when the device appears. In our case, we know this is the only symbolic link in the list, but other devices may have multiple udev rules that create multiple different symbolic links, so it is good practice add to the list instead of assigning to it.

MODE="0444" says to set the permissions of the original device file to the 0444 mode, which allows owner, group, and world all to read the file.

In general, it is very important to use the correct operator (==, +=, or =), or unexpected things will happen.

Now that we understand what the rule does, let's install it in the /etc/udev directory. Udev rules files are arranged in much the same manner as the System V init scripts in /etc/init.d/. Udev executes every script the udev rules directory, /etc/udev/rules.d, in alphabetical/numerical order. Like System V init scripts, the files in the /etc/udev/rules.d directory are usually symbolic links to the real rules files, with the symbolic links named so that the rules will be executed in the correct order.

Copy the hello.rules file from the hello_dev directory into the /etc/udev/ directory and create a link to it that will be executed before any other rules file:

$ sudo cp hello.rules /etc/udev/
$ sudo ln -s ../hello.rules /etc/udev/rules.d/010_hello.rules

Now, reload the hello world driver and look at the new /dev entries:

$ sudo rmmod hello_dev
$ sudo insmod ./hello_dev.ko
$ ls -l /dev/hello*
cr--r--r-- 1 root root 10, 61 2007-06-19 21:21 /dev/hello
lrwxrwxrwx 1 root root      5 2007-06-19 21:21 /dev/hello_world -> hello

Now we have /dev/hello_world! Finally, check that you can read the "Hello, world!" devices as a normal user:

$ cat /dev/hello_world
Hello, world!
$ cat /dev/hello
Hello, world!

For more details on writing udev rules, see Writing udev rules, by Daniel Drake.

Valerie Henson